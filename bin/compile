#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -euo pipefail

BUILDPACK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"

# parse args
BUILD_DIR="${1}"
CACHE_DIR="${2}"
ENV_DIR="${3}"

source "${BUILDPACK_DIR}/lib/common.sh"
source "${BUILDPACK_DIR}/lib/output.sh"
source "${BUILDPACK_DIR}/lib/util.sh"
source "${BUILDPACK_DIR}/lib/openjdk.sh"
source "${BUILDPACK_DIR}/lib/frameworks.sh"
source "${BUILDPACK_DIR}/lib/metrics.sh"

metrics::init "${CACHE_DIR}" "gradle"
metrics::setup

# Exclude environment variables:
# - JAVA_OPTS/JAVA_TOOL_OPTIONS: JVM options are configured by users for their application, not the build process.
# - GRADLE_USER_HOME: Controlled by buildpack for proper caching and configuration behavior
util::export_env_dir "${ENV_DIR}" "." "JAVA_OPTS|JAVA_TOOL_OPTIONS|GRADLE_USER_HOME"

openjdk::install_openjdk_via_jvm_common_buildpack "${BUILD_DIR}" "${BUILDPACK_DIR}"

if [ ! -f "${BUILD_DIR}/gradlew" ]; then
	output::error <<-EOF
		Error: Gradle Wrapper is missing.

		The Gradle wrapper (gradlew) is required to build your application on Heroku.
		This ensures that your application builds with the same version of Gradle
		that you use during development.

		To fix this issue, run this command in your project directory
		locally and commit the generated files:
		$ gradle wrapper

		If you don't have Gradle installed locally, you can install it first:
		https://gradle.org/install/

		For more information about Gradle Wrapper, see:
		https://docs.gradle.org/current/userguide/gradle_wrapper.html
	EOF

	metrics::set_string "failure_reason" "gradle_wrapper::missing"
	exit 1
fi

chmod +x "${BUILD_DIR}/gradlew"

# Setup Gradle user home with global configuration in the cache directory
GRADLE_USER_HOME="${CACHE_DIR}/.gradle"
mkdir -p "${GRADLE_USER_HOME}"

# Remove daemon metadata from the cached directory. Among other things, it contains a list
# of PIDs from previous runs that will clutter up the output and aren't meaningful with
# containerized builds anyway.
rm -rf "${GRADLE_USER_HOME}/daemon"

# https://docs.gradle.org/8.3/userguide/build_environment.html#sec:gradle_configuration_properties
cat <<-EOF >"${GRADLE_USER_HOME}/gradle.properties"
	org.gradle.welcome=never
	org.gradle.caching=true
	org.gradle.projectcachedir=${CACHE_DIR}/.gradle-project
EOF

# We're adding this empty task to all projects to ensure we have a task we can run when
# we start the Gradle daemon that doesn't side effect or output anything to the console.
# https://docs.gradle.org/8.3/userguide/init_scripts.html
cat <<-EOF >"${GRADLE_USER_HOME}/init.gradle"
	allprojects {
		// Intentionally using task over task.register for compatibility with older Gradle versions.
		task('heroku-start-gradle-daemon')
	}
EOF

export GRADLE_USER_HOME

output::step "Starting Gradle daemon..."
gradle_daemon_start=$(util::nowms)

gradle_daemon_output_log_files=$(mktemp)
if ! (cd "${BUILD_DIR}" && ./gradlew heroku-start-gradle-daemon) >"${gradle_daemon_output_log_files}" 2>&1; then
	output::indent <"${gradle_daemon_output_log_files}"

	output::error <<-EOF
		Error: Failed to start Gradle daemon.

		An error occurred while starting the Gradle daemon. This usually
		indicates an issue with the Gradle wrapper, build configuration,
		or system resources.

		Check the output above for specific error messages from Gradle.
		Common causes include:

		- Corrupted or missing Gradle wrapper files
		- Invalid Gradle configuration in build.gradle or settings.gradle
		- Insufficient memory or disk space
		- Network connectivity issues downloading Gradle dependencies
		- Incompatible Gradle version with the current Java runtime

		Try building your application locally with the same Gradle version
		to reproduce and debug the issue.
	EOF

	metrics::set_string "failure_reason" "gradle_daemon::start_failed"
	exit 1
fi

metrics::set_duration "gradle_daemon_start_duration" "${gradle_daemon_start}"

gradle_version="unknown"
gradle_version="$( (cd "${BUILD_DIR}" && ./gradlew --version 2>/dev/null | awk '/^Gradle/ {gsub(/\x1b\[[0-9;]*m/, ""); print $2}') || true)"
metrics::set_string "gradle_version" "${gradle_version}"

# Determine the Gradle task to execute
if [ -z "${GRADLE_TASK:-}" ]; then
	if has_stage_task "${BUILD_DIR}"; then
		GRADLE_TASK="stage"
	elif frameworks::is_spring_boot "${BUILD_DIR}"; then
		GRADLE_TASK="build -x check"
	elif frameworks::is_micronaut "${BUILD_DIR}"; then
		GRADLE_TASK="shadowJar -x check"
	elif frameworks::is_quarkus "${BUILD_DIR}"; then
		GRADLE_TASK="build -x check"
	elif frameworks::is_ratpack "${BUILD_DIR}"; then
		GRADLE_TASK="installDist -x check"
	else
		GRADLE_TASK="stage"
	fi
fi

output::step "Executing Gradle"
echo "$ ./gradlew ${GRADLE_TASK}" | output::indent

# We rely on word splitting for GRADLE_TASK
# shellcheck disable=SC2086
if ! (cd "${BUILD_DIR}" && ./gradlew ${GRADLE_TASK}) 2>&1 | output::indent; then
	output::error <<-EOF
		Error: Gradle build failed.

		An error occurred during the Gradle build process. This usually
		indicates an issue with your application's dependencies, configuration,
		or source code.

		First, check the build output above for specific error messages
		from Gradle that might indicate what went wrong. Common issues include:

		- Missing or incompatible dependencies in your build.gradle
		- Compilation errors in your application source code
		- Test failures (if tests are enabled during the build)
		- Invalid Gradle configuration or settings
		- Using an incompatible OpenJDK version for your project

		If you're unable to determine the cause from the Gradle output,
		try building your application locally with the same Gradle command
		to reproduce and debug the issue.
	EOF

	metrics::set_string "failure_reason" "gradle_build::non_zero_exit_code"
	exit 1
fi

output::step "Stopping Gradle daemon..."
(cd "${BUILD_DIR}" && ./gradlew -q --stop) | output::indent

# https://github.com/heroku/heroku-buildpack-gradle/issues/49
rm -rf "${CACHE_DIR}/.gradle/nodejs"
